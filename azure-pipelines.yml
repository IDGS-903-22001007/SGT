# =====================================================
# üì¶ Pipeline para proyecto Python - Azure DevOps
# Adaptado a la estructura actual con /sgt y /test
# =====================================================

trigger:
- main  # Se ejecuta en cada push a la rama main

pool:
  name: 'AgenteLocal'  # Usa tu agente local o c√°mbialo a 'ubuntu-latest' si es remoto

stages:

# =====================================================
# 1Ô∏è‚É£ Etapa: Configuraci√≥n de Python
# =====================================================
- stage: ConfigurarPython
  displayName: 'Etapa 1: Configurar Python'
  jobs:
  - job: ConfigurarPythonJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
      displayName: 'Configurar Python 3.11'

# =====================================================
# 2Ô∏è‚É£ Etapa: Verificar archivos del repositorio
# =====================================================
- stage: VerificarArchivos
  displayName: 'Etapa 2: Verificar archivos en el repo'
  jobs:
  - job: VerificarArchivosJob
    steps:
    - script: dir $(Build.SourcesDirectory)
      displayName: 'Listar archivos del repositorio'

# =====================================================
# 3Ô∏è‚É£ Etapa: Instalar dependencias
# =====================================================
- stage: InstalarDependencias
  displayName: 'Etapa 3: Instalar dependencias'
  jobs:
  - job: InstalarDependenciasJob
    steps:
    - script: |
        cd $(Build.SourcesDirectory)
        python -m venv venv
        venv\Scripts\activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Crear virtualenv e instalar dependencias'

# =====================================================
# 4Ô∏è‚É£ Etapa: Ejecutar pruebas con pytest
# =====================================================
- stage: EjecutarPruebas
  displayName: 'Etapa 4: Ejecutar pruebas'
  jobs:
  - job: EjecutarPruebasJob
    steps:
    - script: |
        # Asume que el venv fue creado e instalado en el stage anterior
        # Aqu√≠ deber√≠as activar el venv en tu agente o usar el entorno del agente para pytest
        # Si usas un agente autoalojado (como 'AgenteLocal'), el venv se mantiene entre etapas.
        # Si usas un agente hospedado por Azure, necesitar√≠as recrear/reusar el venv.
        # Asumiendo que el venv es accesible:
        cd $(Build.SourcesDirectory)
        venv\Scripts\activate
        pytest test --maxfail=1 --disable-warnings -q
      displayName: 'Ejecutar pruebas con pytest'

# =====================================================
# 5Ô∏è‚É£ Etapa: Publicar artefactos
# *DEBE* ejecutarse antes del despliegue.
# =====================================================
- stage: PublicarArtefactos
  displayName: 'Etapa 5: Publicar artefactos'
  dependsOn: EjecutarPruebas # Solo si las pruebas fueron exitosas
  condition: succeeded()
  jobs:
  - job: PublicarArtefactosJob
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'dist' # Aseg√∫rate de que este directorio existe y contiene el c√≥digo a desplegar
        artifactName: 'build-sprint-1'
      displayName: 'Publicar artefacto del build (build-sprint-1)'

# =====================================================
# 6Ô∏è‚É£ Etapa: Release Sprint 1 (Despliegue)
# =====================================================
- stage: ReleaseSprint1
  displayName: 'Etapa 6: Release Sprint 1 ‚Äì Entregable funcional'
  dependsOn: PublicarArtefactos # Depende del √©xito de la publicaci√≥n del artefacto
  condition: succeeded()
  jobs:
  - deployment: DeploySprint1
    displayName: 'Despliegue Sprint 1'
    # Configuraci√≥n de environment, clave para despliegues modernos
    environment: 'Releases - sprint 1'  # üëà Usa el nombre exacto del Environment que creaste en Azure DevOps
    strategy:
      runOnce:
        deploy:
          steps:
          # ---
          # PASO CLAVE: Si necesitas desplegar a Azure App Service (ejemplo):
          # Descomenta y configura esta tarea si est√°s desplegando la carpeta 'dist'
          # - task: AzureWebApp@1
          #   displayName: 'Desplegar SGT a Azure App Service'
          #   inputs:
          #     azureSubscription: 'Nombre-De-Tu-Service-Connection'
          #     appName: 'nombre-de-tu-app-service'
          #     package: '$(Pipeline.Workspace)/build-sprint-1/dist' # Ajusta la ruta del artefacto descargado
          # ---
          
          # Tarea de demostraci√≥n (mantengo la tuya original como nota)
          - script: |
              echo "=== Release del Sprint 1 ==="
              echo "Historia de Usuario: US001 ‚Äì Inicio de sesi√≥n"
              echo "Entregable funcional listo para revisi√≥n del Product Owner"
              echo "============================="
            displayName: 'Mensaje de √âxito del Release Sprint 1'
