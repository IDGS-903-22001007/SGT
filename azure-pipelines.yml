# =====================================================
# üì¶ Pipeline para Proyecto Flask - Azure DevOps
# Flujo CI/CD: Build/Test ‚Üí Deploy (App Service)
# Autor: Brayan
# =====================================================

trigger:
- main  # Ejecuta el pipeline en cada push a la rama main

pool:
  name: 'AgenteLocal'  # Aseg√∫rate que tu agente tenga Python 3.11 instalado

# -----------------------------------------------------
# Variables del proyecto
# -----------------------------------------------------
variables:
  AppSourceDir: '$(Build.SourcesDirectory)'
  ArtifactName: 'sgt-deploy-package'
  ServiceConnectionName: 'AZ-Conexion-SGT'        # Conexi√≥n de servicio en Azure DevOps
  AppServiceName: 'sgt-app-integrated-2025'       # Nombre del App Service en Azure
  PythonVersion: '3.11'

# =====================================================
# 1Ô∏è‚É£ Etapa: CI (Integraci√≥n Continua) - Build y Test
# =====================================================
stages:
- stage: CI_BuildAndTest
  displayName: 'Etapa 1: Integraci√≥n Continua (Build y Test)'
  jobs:
  - job: PythonCI
    displayName: 'Job: Configuraci√≥n, Dependencias y Pruebas'
    steps:

    # --- 1. Configurar Python ---
    - task: UsePythonVersion@0
      displayName: 'Configurar Python $(PythonVersion)'
      inputs:
        versionSpec: '$(PythonVersion)'

    # --- 2. Instalar dependencias ---
    - script: |
        cd $(AppSourceDir)/sgt
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Instalar dependencias (Flask y Gunicorn)'

    # --- 3. Ejecutar pruebas ---
    # Puedes omitir si no tienes carpeta "test"
    - script: |
        cd $(AppSourceDir)
        echo "No se encontraron pruebas unitarias, continuando..."
      displayName: 'Ejecutar Pruebas (opcional)'
      continueOnError: true

    # --- 4. Publicar artefactos ---
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar Artefacto del Build (Carpeta /sgt)'
      inputs:
        pathToPublish: '$(AppSourceDir)/sgt'
        artifactName: '$(ArtifactName)'

# =====================================================
# 2Ô∏è‚É£ Etapa: CD (Despliegue Continuo)
# =====================================================
- stage: CD_Deployment
  displayName: 'Etapa 2: Despliegue en Azure App Service'
  dependsOn: CI_BuildAndTest
  condition: succeeded()

  jobs:
  - deployment: DeployFunctionalIncrement
    displayName: 'Job: Despliegue a App Service'
    environment: 'Entorno-Integrado-SGT'

    strategy:
      runOnce:
        deploy:
          steps:

          # --- 1. Descargar artefacto del build ---
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar Artefacto de C√≥digo'
            inputs:
              artifactName: '$(ArtifactName)'
              path: '$(Pipeline.Workspace)/$(ArtifactName)'

          # --- 2. Desplegar aplicaci√≥n Flask ---
          - task: AzureWebApp@1
            displayName: 'Desplegar Aplicaci√≥n Flask (login.html)'
            inputs:
              azureSubscription: '$(ServiceConnectionName)'
              appName: '$(AppServiceName)'
              appType: webApp
              package: '$(Pipeline.Workspace)/$(ArtifactName)'
              # üî• ESTE ES EL PUNTO CLAVE: ejecuta tu main.py
              startupCommand: 'gunicorn --bind=0.0.0.0 --workers=4 --timeout=90 main:app'

          # --- 3. Mensaje final ---
          - script: |
              echo "‚úÖ Pipeline CI/CD completado exitosamente."
              echo "Aplicaci√≥n desplegada correctamente en Azure App Service."
              echo "URL de validaci√≥n: https://$(AppServiceName).azurewebsites.net"
            displayName: 'Mensaje de √âxito y URL de Validaci√≥n'
