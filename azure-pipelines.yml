# =====================================================
# üì¶ Pipeline para proyecto Python - Azure DevOps
# Flujo: CI (Build/Test) -> CD (Deploy)
# =====================================================

trigger:
- main

pool:
  name: 'AgenteLocal' # o usa 'ubuntu-latest' para Linux en la nube

# Variables del Proyecto
variables:
  AppSourceDir: '$(Build.SourcesDirectory)'
  ArtifactName: 'sgt-deploy-package'
  PythonVersion: '3.11'
  VenvName: 'venv'
  
  # VALORES DE AZURE CONFIRMADOS
  ServiceConnectionName: 'AZ-Conexion-SGT'        
  AppServiceName: 'sgt-app-integrated-2025'  
  TeamsWebhook: '' # Coloca aqu√≠ la URL del webhook de Teams (secret)

stages:

# =====================================================
# 1Ô∏è‚É£ Etapa: CI (Integraci√≥n Continua) - Build y Test
# =====================================================
- stage: CI_BuildAndTest
  displayName: 'Etapa 1: Integraci√≥n Continua (Build y Test)'
  jobs:
  - job: PythonCI
    displayName: 'Job: Compilaci√≥n, Instalaci√≥n y Pruebas'
    steps:
    
    # --- 1. Configuraci√≥n de Python ---
    - task: UsePythonVersion@0
      displayName: 'Configurar Python $(PythonVersion)'
      inputs:
        versionSpec: '$(PythonVersion)'

    # --- 2. Instalaci√≥n de Dependencias ---
    - script: |
        cd $(AppSourceDir)
        python -m venv $(VenvName)
        if [ -f "$(VenvName)/bin/activate" ]; then
            source $(VenvName)/bin/activate
        else
            . $(VenvName)/Scripts/activate
        fi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Instalar dependencias en entorno virtual'
      
    # --- 3. Ejecutar Pruebas ---
    - script: |
        cd $(AppSourceDir)
        if [ -f "$(VenvName)/bin/activate" ]; then
            source $(VenvName)/bin/activate
        else
            . $(VenvName)/Scripts/activate
        fi
        pytest --junitxml=results.xml
      displayName: 'Ejecutar pruebas de integraci√≥n continua'
      continueOnError: false

    # --- 4. Publicar Resultados de Pruebas ---
    - task: PublishTestResults@2
      displayName: 'Publicar resultados de pruebas'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/results.xml'
        failTaskOnFailedTests: true
        
    # --- 5. Publicar Artefactos ---
    - task: PublishBuildArtifacts@1
      displayName: 'Publicar artefacto del build'
      inputs:
        pathToPublish: '$(AppSourceDir)'
        artifactName: '$(ArtifactName)'

# =====================================================
# 2Ô∏è‚É£ Etapa: CD (Despliegue Continuo)
# =====================================================
- stage: CD_Deployment
  displayName: 'Etapa 2: Despliegue (Entorno Integrado Funcional)'
  dependsOn: CI_BuildAndTest
  condition: succeeded()
  
  jobs:
  - deployment: DeployFunctionalIncrement
    displayName: 'Job: Despliegue a App Service'
    
    environment: 'Entorno-Integrado-SGT'  
    
    strategy:
      runOnce:
        deploy:
          steps:
          
          # --- 1. Descargar Artefacto ---
          - task: DownloadPipelineArtifact@2
            displayName: 'Descargar artefacto de c√≥digo'
            inputs:
              artifactName: '$(ArtifactName)'
              path: '$(Pipeline.Workspace)/$(ArtifactName)'

          # --- 2. Despliegue a Azure App Service ---
          - task: AzureWebApp@1
            displayName: 'Desplegar incrementos funcionales a App Service'
            inputs:
              azureSubscription: '$(ServiceConnectionName)'  
              appName: '$(AppServiceName)'              
              package: '$(Pipeline.Workspace)/$(ArtifactName)'  
              startupCommand: 'gunicorn --bind=0.0.0.0 --workers=4 --timeout=90 sgt.main:app'

          # --- 3. Validaci√≥n HTTP ---
          - script: |
              echo "Verificando respuesta del App Service..."
              status=$(curl -o /dev/null -s -w "%{http_code}\n" https://$(AppServiceName).azurewebsites.net)
              if [ "$status" -eq 200 ]; then
                echo "‚úÖ App Service responde correctamente (HTTP 200)."
              else
                echo "‚ùå Error: App Service respondi√≥ con $status"
                exit 1
              fi
            displayName: 'Validar despliegue HTTP'

          # --- 4. Notificaci√≥n a Teams ---
          - script: |
              curl -H 'Content-Type: application/json' -d "{
                  \"@type\": \"MessageCard\",
                  \"@context\": \"https://schema.org/extensions\",
                  \"summary\": \"Pipeline completado\",
                  \"themeColor\": \"00FF00\",
                  \"title\": \"üöÄ Pipeline CI/CD completado\",
                  \"sections\": [{
                      \"activityTitle\": \"App Service: $(AppServiceName)\",
                      \"activitySubtitle\": \"URL: https://$(AppServiceName).azurewebsites.net\",
                      \"facts\": [
                          {\"name\": \"Estado\", \"value\": \"‚úÖ √âxito\"},
                          {\"name\": \"Stage\", \"value\": \"CD_Deployment\"}
                      ]
                  }]
              }" $(TeamsWebhook)
            displayName: 'Notificar Teams'

          # --- 5. Mensaje final ---
          - script: |
              echo "‚úÖ Pipeline CI/CD completado exitosamente."
              echo "Las 3 Historias de Usuario est√°n desplegadas en:"
              echo "URL: https://$(AppServiceName).azurewebsites.net"
            displayName: 'Mensaje de √©xito y validaci√≥n'
